dispchar MACRO char,pos,horiz

mov bx,0
mov dh,pos		;sets cursor vertical
mov dl,horiz	;horizontal
mov ah,02h
int 10h

mov cx,1
mov al,char				;CHAR
mov bl,69		;TEXT COLOUR
mov ah,09h
int 10h

endm

dispcharacter MACRO char,pos,horiz

mov bx,0
mov dh,pos		;sets cursor vertical
mov dl,horiz	;horizontal
mov ah,02h
int 10h

mov cx,1
mov al,char				;CHAR
mov bl,15		;TEXT COLOUR
mov ah,09h
int 10h

endm

dispchar1 MACRO char,pos,horiz

mov bx,0
mov dh,pos		;sets cursor vertical
mov dl,horiz	;horizontal
mov ah,02h
int 10h

mov cx,1
mov al,char				;CHAR
mov bl,63		;TEXT COLOUR
mov ah,09h
int 10h

endm

dispchar2 MACRO char,pos,horiz

mov bx,0
mov dh,pos		;sets cursor vertical
mov dl,horiz	;horizontal
mov ah,02h
int 10h

mov cx,1
mov ax,char				;CHAR
mov bl,63		;TEXT COLOUR
mov ah,09h
int 10h

endm


drawrectangle MACRO vertical,horizontal,colour,x_shapecoord,y_shapecoord

mov x_shape,x_shapecoord
mov y_shape,y_shapecoord

mov cx,1			
	.WHILE ( cx != vertical )	;;VERTICAL
		push cx
		push x_shape
			mov cx,1		
			.WHILE ( cx != horizontal )	;; HORIZONTAL
				 push cx
				 mov ah,0Ch
				 mov al,colour		;;Colour
				 mov cx,x_shape		;;initial x position
				 mov dx,y_shape		;;initial y position
				 int 10h
				 inc x_shape
				 pop cx
				 inc cx
			 .endW
		pop x_shape
		pop cx
		inc cx
		inc y_shape
	.endW
endm

;;;;;;;drawrectangle vertical,horizontal,colour,x_shapecoord,y_shapecoord;;;;;;;;;;
;;34


drawcactus MACRO x_Cactus1

mov dx,x_Cactus1

inc dx
drawrectangle 3,8,49,dx,135

mov dx,x_Cactus1

drawrectangle 40,10,49,dx,136

mov dx,x_Cactus1

drawrectangle 7,18,49,dx,155

mov dx,x_Cactus1
add dx,2

drawrectangle 30,2,43,dx,140

mov dx,x_Cactus1
add dx,14

drawrectangle 4,6,49,dx,157

mov dx,x_Cactus1
add dx,14

drawrectangle 4,7,49,dx,156

mov dx,x_Cactus1
add dx,15

drawrectangle 10,7,49,dx,148

mov dx,x_Cactus1
add dx,16

drawrectangle 2,5,49,dx,147




endm
;;;;;;;drawrectangle vertical,horizontal,colour,x_shapecoord,y_shapecoord;;;;;;;;;;
drawcactus2 MACRO x_Cactus2

mov dx,x_Cactus2

inc dx
drawrectangle 3,8,50,dx,138

mov dx,x_Cactus2

drawrectangle 35,10,50,dx,139

mov dx,x_Cactus2

drawrectangle 7,18,50,dx,143

;;;;;;;;;;;;;
mov dx,x_Cactus2
sub dx,8

drawrectangle 7,10,50,dx,155

mov dx,x_Cactus2
sub dx,10

drawrectangle 7,7,50,dx,154

mov dx,x_Cactus2
sub dx,9

drawrectangle 7,5,50,dx,153
;;;;;;;;;;;;

mov dx,x_Cactus2
add dx,2

drawrectangle 25,2,43,dx,143

mov dx,x_Cactus2
add dx,14

drawrectangle 4,6,50,dx,145

mov dx,x_Cactus2
add dx,14

drawrectangle 4,7,50,dx,144

mov dx,x_Cactus2
add dx,15

drawrectangle 10,7,50,dx,136

mov dx,x_Cactus2
add dx,16

drawrectangle 2,5,50,dx,135


endm

;;y 90

drawRock MACRO x_rock

mov dx,x_rock

drawrectangle 3,8,0,dx,90

mov dx,x_rock
sub dx,6

drawrectangle 3,20,0,dx,92

mov dx,x_rock
sub dx,8

drawrectangle 3,24,0,dx,94

mov dx,x_rock
sub dx,10

drawrectangle 6,28,0,dx,96

mov dx,x_rock
sub dx,12

drawrectangle 8,32,0,dx,101

mov dx,x_rock
sub dx,10

drawrectangle 4,28,0,dx,108

mov dx,x_rock
sub dx,6

drawrectangle 5,20,0,dx,111

;.................inner 


mov dx,x_rock
sub dx,6

drawrectangle 3,20,14,dx,94

mov dx,x_rock
add dx,2

drawrectangle 3,4,0,dx,94



mov dx,x_rock
sub dx,8

drawrectangle 6,24,14,dx,96



mov dx,x_rock
sub dx,10

drawrectangle 8,28,14,dx,101



mov dx,x_rock
sub dx,4

drawrectangle 5,16,14,dx,108

;.................plus

mov dx,x_rock
add dx,6

drawrectangle 3,7,0,dx,102

mov dx,x_rock
add dx,8

drawrectangle 7,3,0,dx,100


endm



DrawCloud MACRO x_cloud,y_cloud
                               			;Draw Cloud
	push x_cloud
	push y_cloud
	mov cx,1
	.WHILE( cx != 0)
	    push cx
		push y_cloud
		mov si, offset Cloud
		mov cx,17
		.WHILE( cx != 0)
			 push cx
			 push x_cloud 
			 mov cx,43
			 .WHILE( cx != 0)
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 .if (al != 41)
					mov cx,x_cloud
					mov dx,y_cloud
					int 10h
				.endif

				 inc x_cloud
				 pop cx
				 inc si
				 dec cx
			
			 .endW
			 inc y_cloud
			 pop x_cloud
			 pop cx
			 dec cx
		.endW
		pop y_cloud
		add x_cloud,43
		pop cx
		dec cx
	.endW
	pop y_cloud 
	pop x_cloud
endm



DrawCloud1 MACRO x_cloud1,y_cloud1                              ;Draw Cloud1
	push x_cloud1 
	push y_cloud1
	mov cx,1
	.WHILE( cx != 0)
	    push cx
		push y_cloud1
		mov si, offset Cloud1
		mov cx,17
		.WHILE( cx != 0)
			 push cx
			 push x_cloud1 
			 mov cx,43
			 .WHILE( cx != 0)
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				.if (al != 41)
					mov cx,x_cloud1
					mov dx,y_cloud1
					int 10h
				.endif
				 inc x_cloud1
				 pop cx
				 inc si
				 dec cx
			 .endW
			 inc y_cloud1
			 pop x_cloud1
			 pop cx
			 dec cx
		.endW
		pop y_cloud1
		add x_cloud1,43
		pop cx
		dec cx
	.endW
	pop y_cloud1
	pop x_cloud1 

endm




;----------------------------------------------------------------MACRO END-------------------------------------------------------------------;

.model medium
.stack 8192
.data



Dirt db  42,41,41,41,42,42,42,42,42,41,42,42,42,42						 	;each block of dirt
db  42,42,42,42,42,42,42,42,42,42,42,42,6,42
db  42,42,42,6,42,42,42,6,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,6,42,42,42
db  42,42,42,42,42,42,42,6,42,42,42,42,42,42
db  42,42,42,42,42,6,42,42,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,6,42,42,42,42,42,6,42
db  42,42,6,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,42,42,42,42,42,6,42,42
db  42,42,42,42,42,42,42,42,42,42,42,42,6,42
db  42,42,42,6,42,42,42,6,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,6,42,42,42
db  42,42,42,42,42,42,42,6,42,42,42,42,42,42
db  42,42,42,42,42,6,42,42,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,6,42,42,42,42,42,6,42
db  42,42,6,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,42,42,42,42,42,6,42,42
db  42,42,42,42,42,42,42,42,42,42,42,42,6,42
db  42,42,42,6,42,42,42,6,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,6,42,42,42
db  42,42,42,42,42,42,42,6,42,42,42,42,42,42
db  42,42,42,42,42,6,42,42,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,6,42,42,42,42,42,6,42
db  42,42,6,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,42,42,42,42,42,6,42,42
db  42,42,42,42,42,42,42,42,42,42,42,42,6,42
db  42,42,42,6,42,42,42,6,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,6,42,42,42
db  42,42,42,42,42,42,42,6,42,42,42,42,42,42
db  42,42,42,42,42,42,42,42,42,42,42,42,6,42
db  42,42,42,6,42,42,42,6,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,6,42,42,42
db  42,42,42,42,42,42,42,6,42,42,42,42,42,42
db  42,42,42,42,42,6,42,42,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,6,42,42,42,42,42,6,42
db  42,42,6,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,42,42,42,42,42,6,42,42
db  42,42,42,42,42,42,42,42,42,42,42,42,6,42
db  42,42,42,6,42,42,42,6,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,6,42,42,42
db  42,42,42,42,42,42,42,6,42,42,42,42,42,42
db  42,42,42,42,42,6,42,42,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,6,42,42,42,42,42,6,42
db  42,42,6,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,42,42,42,42,42,6,42,42
db  42,42,42,42,42,42,42,42,42,42,42,42,6,42
db  42,42,42,6,42,42,42,6,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,6,42,42,42
db  42,42,42,42,42,42,42,6,42,42,42,42,42,42
db  42,42,42,42,42,6,42,42,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,6,42,42,42,42,42,6,42
db  42,42,6,42,42,42,42,42,42,42,42,42,42,42
db  42,42,42,42,42,42,42,42,42,42,42,6,42,42
db  42,42,42,42,42,42,42,42,42,42,42,42,6,42
db  42,42,42,6,42,42,42,6,42,42,42,42,42,42
db  42,6,42,42,42,42,42,42,42,42,6,42,42,42
db  42,42,42,42,42,42,42,6,42,42,42,42,42,42




SpaceShip db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,54,54,54,54,54,54,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,2,2,54,54,2,2,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,2,2,2,2,2,2,2,2,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,2,2,43,2,2,43,2,2,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,2,2,2,2,2,2,2,2,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,54,2,2,2,2,2,2,2,2,54,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,54,54,2,2,2,2,2,2,2,2,54,54,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,0,29,0,0,0,54,54,54,54,54,54,54,2,2,2,2,54,54,54,54,54,54,54,0,0,0,29,0,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,0,29,29,29,29,0,0,54,54,54,54,54,2,2,2,2,54,54,54,54,54,0,0,29,29,29,29,0,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,0,0,27,27,28,28,29,29,29,0,0,0,54,54,2,2,2,2,54,54,0,0,0,29,29,29,28,28,27,27,0,0,41,41,41,41,41,41,41
      db 41,41,41,41,0,0,0,26,26,27,27,28,28,29,29,29,29,29,0,0,0,0,0,0,0,0,0,0,29,29,29,29,29,28,28,27,27,26,26,0,0,0,41,41,41,41
      db 41,41,0,0,25,25,25,25,26,26,26,26,27,27,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,28,28,27,27,26,26,26,26,25,25,25,25,0,0,41,41
      db 41,0,24,24,24,24,24,25,25,25,26,26,26,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,27,27,27,27,27,26,26,26,25,25,25,24,24,24,24,0,41
      db 41,41,0,23,23,23,23,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,27,27,27,27,27,27,26,26,26,26,25,25,25,25,24,24,24,23,23,23,23,0,41,41
      db 41,41,41,0,21,21,21,22,22,23,23,24,24,25,25,25,25,25,25,26,26,26,26,26,26,26,26,25,25,25,25,25,25,24,24,23,23,22,22,21,21,21,0,41,41,41
      db 41,41,41,41,0,21,21,21,22,22,23,23,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,24,24,24,23,23,22,22,21,21,21,0,41,41,41,41
      db 41,41,41,41,41,0,21,21,21,22,22,23,23,23,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,24,24,24,23,23,23,22,22,21,21,21,0,41,41,41,41,41
      db 41,41,41,41,41,41,0,0,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,25,25,25,24,24,24,23,23,23,22,22,22,21,21,21,0,0,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,0,0,21,21,21,22,22,23,23,23,23,24,24,24,24,24,24,24,24,23,23,23,23,22,22,21,21,21,0,0,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,0,0,21,21,21,22,22,22,23,23,23,23,23,23,23,23,23,23,22,22,22,21,21,21,0,0,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,21,21,21,22,22,22,22,22,22,22,22,22,22,21,21,21,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,0,21,21,21,21,21,21,21,21,21,21,0,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,0,0,0,0,0,0,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	  
SpaceShip1 db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,54,54,54,54,54,54,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,2,2,54,54,2,2,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,2,2,2,2,2,2,2,2,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,2,2,43,2,2,43,2,2,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,2,2,2,2,2,2,2,2,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,54,2,2,2,2,2,2,2,2,54,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,54,54,2,2,2,2,2,2,2,2,54,54,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,0,29,0,0,0,54,54,54,54,54,54,54,2,2,2,2,54,54,54,54,54,54,54,0,0,0,29,0,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,0,29,29,29,29,0,0,54,54,54,54,54,2,2,2,2,54,54,54,54,54,0,0,29,29,29,29,0,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,0,0,27,27,28,28,29,29,29,0,0,0,54,54,2,2,2,2,54,54,0,0,0,29,29,29,28,28,27,27,0,0,41,41,41,41,41,41,41
      db 41,41,41,41,0,0,0,26,26,27,27,28,28,29,29,29,29,29,0,0,0,0,0,0,0,0,0,0,29,29,29,29,29,28,28,27,27,26,26,0,0,0,41,41,41,41
      db 41,41,0,0,25,25,25,25,26,26,26,26,27,27,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,28,28,27,27,26,26,26,26,25,25,25,25,0,0,41,41
      db 41,0,24,24,24,24,24,25,25,25,26,26,26,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,27,27,27,27,27,26,26,26,25,25,25,24,24,24,24,0,41
      db 41,41,0,23,23,23,23,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,27,27,27,27,27,27,26,26,26,26,25,25,25,25,24,24,24,23,23,23,23,0,41,41
      db 41,41,41,0,21,21,21,22,22,23,23,24,24,25,25,25,25,25,25,26,26,26,26,26,26,26,26,25,25,25,25,25,25,24,24,23,23,22,22,21,21,21,0,41,41,41
      db 41,41,41,41,0,21,21,21,22,22,23,23,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,24,24,24,23,23,22,22,21,21,21,0,41,41,41,41
      db 41,41,41,41,14,0,21,21,21,22,22,23,23,23,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,24,24,24,23,23,23,22,22,21,21,21,0,14,41,41,41,41
      db 41,41,41,41,43,14,0,0,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,25,25,25,24,24,24,23,23,23,22,22,22,21,21,21,0,0,14,43,41,41,41,41
      db 41,41,41,41,12,43,14,41,0,0,21,21,21,22,22,23,23,23,23,24,24,24,24,24,24,24,24,23,23,23,23,22,22,21,21,21,0,0,41,14,43,12,41,41,41,41
      db 41,41,41,41,43,14,12,41,41,41,0,0,21,21,21,22,22,22,23,23,23,23,23,23,23,23,23,23,22,22,22,21,21,21,0,0,41,41,41,12,14,43,41,41,41,41
      db 41,41,41,41,12,43,14,41,41,41,41,43,0,0,0,21,21,21,22,22,22,22,22,22,22,22,22,22,21,21,21,0,0,0,14,41,41,41,41,43,14,12,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,12,14,43,0,0,0,0,21,21,21,21,21,21,21,21,21,21,0,0,0,0,14,43,12,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,14,43,12,41,41,41,0,0,0,0,0,0,0,0,0,0,0,0,41,41,41,12,14,43,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,14,12,43,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,43,14,12,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41

SpaceShip2 db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,54,54,54,54,54,54,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,12,12,54,54,12,12,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,12,12,12,12,12,12,12,12,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,12,12,43,12,12,43,12,12,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,12,12,12,12,12,12,12,12,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,54,12,12,12,12,12,12,12,12,54,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,0,54,54,54,54,54,54,54,54,12,12,12,12,12,12,12,12,54,54,54,54,54,54,54,54,0,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,0,29,0,0,0,54,54,54,54,54,54,54,12,12,12,12,54,54,54,54,54,54,54,0,0,0,29,0,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,0,29,29,29,29,0,0,54,54,54,54,54,12,12,12,12,54,54,54,54,54,0,0,29,29,29,29,0,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,0,0,27,27,28,28,29,29,29,0,0,0,54,54,12,12,12,12,54,54,0,0,0,29,29,29,28,28,27,27,0,0,41,41,41,41,41,41,41
      db 41,41,41,41,0,0,0,26,26,27,27,28,28,29,29,29,29,29,0,0,0,0,0,0,0,0,0,0,29,29,29,29,29,28,28,27,27,26,26,0,0,0,41,41,41,41
      db 41,41,0,0,25,25,25,25,26,26,26,26,27,27,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,28,28,27,27,26,26,26,26,25,25,25,25,0,0,41,41
      db 41,0,24,24,24,24,24,25,25,25,26,26,26,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,27,27,27,27,27,26,26,26,25,25,25,24,24,24,24,0,41
      db 41,41,0,23,23,23,23,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,27,27,27,27,27,27,26,26,26,26,25,25,25,25,24,24,24,23,23,23,23,0,41,41
      db 41,41,41,0,21,21,21,22,22,23,23,24,24,25,25,25,25,25,25,26,26,26,26,26,26,26,26,25,25,25,25,25,25,24,24,23,23,22,22,21,21,21,0,41,41,41
      db 41,41,41,41,0,21,21,21,22,22,23,23,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,24,24,24,23,23,22,22,21,21,21,0,41,41,41,41
      db 41,41,41,41,41,0,21,21,21,22,22,23,23,23,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,24,24,24,23,23,23,22,22,21,21,21,0,41,41,41,41,41
      db 41,41,41,41,41,41,0,0,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,25,25,25,24,24,24,23,23,23,22,22,22,21,21,21,0,0,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,0,0,21,21,21,22,22,23,23,23,23,24,24,24,24,24,24,24,24,23,23,23,23,22,22,21,21,21,0,0,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,0,0,21,21,21,22,22,22,23,23,23,23,23,23,23,23,23,23,22,22,22,21,21,21,0,0,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,21,21,21,22,22,22,22,22,22,22,22,22,22,21,21,21,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,0,21,21,21,21,21,21,21,21,21,21,0,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41
      db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,0,0,0,0,0,0,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	  
	  
 Cloud  db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,41,41,41,41,41,41,0,0,25,25,25,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,41,41,41,41,41,0,0,15,29,29,25,25,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,41,41,41,41,41,0,15,15,15,29,29,25,25,25,0,41,41,41,41,41,41,41,41,41,41,0,0,0,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,41,41,41,0,0,0,15,15,15,15,15,29,29,25,25,0,41,41,41,41,41,41,41,41,0,29,25,25,0,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,41,0,0,15,15,15,15,15,15,15,15,15,29,29,25,25,0,41,41,41,41,41,41,0,15,15,15,29,25,0,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,0,15,15,15,15,15,15,15,15,15,15,15,15,25,29,29,0,41,41,41,41,41,41,0,15,15,29,29,25,0,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,0,15,15,15,15,15,15,15,15,15,15,15,25,29,29,29,0,0,41,41,41,41,0,0,15,15,15,15,29,25,0,0,0,0,41,41,41
	db 41,41,41,41,41,41,0,15,15,15,15,15,15,15,15,15,15,15,15,29,29,29,25,0,41,41,41,0,15,15,15,15,15,15,25,29,29,25,25,25,0,41,41
	db 41,41,41,41,41,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,29,25,0,41,41,41,0,15,15,15,15,15,15,15,15,15,29,29,29,25,0,41
	db 41,41,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,25,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,29,29,25,0,41
	db 41,0,0,15,15,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,25,29,25,25,25,25,25,0,15,15,15,15,15,15,15,15,15,29,29,25,0,41
	db 41,0,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,25,29,29,29,29,29,25,25,25,0,15,15,15,15,15,15,15,29,29,29,25,0,41
	db 41,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,29,29,29,25,0,15,15,15,15,15,15,29,29,25,25,0,41,41
	db 41,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,29,29,29,29,25,0,0,0,0,0,0,0,0,0,0,0,41,41,41
	db 41,41,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,29,29,29,25,25,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41
        db 41,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	



 Cloud1 db 41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,41,41,41,41,41,41,0,0,25,25,25,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,41,41,41,41,41,0,0,15,29,29,25,25,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,41,41,41,41,41,0,15,15,15,29,29,25,25,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,41,41,41,0,0,0,15,15,15,15,15,29,29,25,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,41,0,0,15,15,15,15,15,15,15,15,15,29,29,25,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,0,15,15,15,15,15,15,15,15,15,15,15,15,25,29,29,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,0,15,15,15,15,15,15,15,15,15,15,15,25,29,29,29,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,41,0,15,15,15,15,15,15,15,15,15,15,15,15,29,29,29,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,41,41,41,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,29,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,25,0,0,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,0,0,15,15,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,25,29,25,25,25,25,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,0,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,25,29,29,29,29,29,25,25,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,29,29,29,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,29,29,29,29,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 41,41,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,29,29,29,29,25,25,25,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41
    db 41,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	

;...................................
;............................................................................................................
 Heart 	db 	41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 	41,41,41,41,13,13,13,13,13,13,41,41,41,41,41,41,41,41,13,13,13,13,13,13,41,41,41,41
	db 	41,41,41,13,13,13,13,13,13,13,13,41,41,41,41,41,41,13,13,13,13,13,13,13,13,41,41,41
	db 	41,41,13,13,13,13,13,13,13,13,13,13,41,41,41,41,13,13,13,13,13,13,13,13,13,13,41,41
	db 	41,41,13,13,13,13,13,13,13,13,13,13,13,41,41,13,13,13,13,13,13,13,13,13,13,13,41,41
	db	41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41
	db 	41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41
	db 	41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41
	db	41,41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41
	db 	41,41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41
	db 	41,41,41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41
	db 	41,41,41,41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41,41
	db 	41,41,41,41,41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41,41,41
	db 	41,41,41,41,41,41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41,41,41,41
	db	41,41,41,41,41,41,41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41,41,41,41,41
	db 	41,41,41,41,41,41,41,41,41,13,13,13,13,13,13,13,13,13,13,13,41,41,41,41,41,41,41,41
	db 	41,41,41,41,41,41,41,41,41,41,13,13,13,13,13,13,13,13,13,41,41,41,41,41,41,41,41,41
	db 	41,41,41,41,41,41,41,41,41,41,41,13,13,13,13,13,13,13,41,41,41,41,41,41,41,41,41,41
	db 	41,41,41,41,41,41,41,41,41,41,41,41,13,13,13,13,13,41,41,41,41,41,41,41,41,41,41,41
	db 	41,41,41,41,41,41,41,41,41,41,41,41,41,13,13,13,41,41,41,41,41,41,41,41,41,41,41,41
	db 	41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
	db 	41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41
;........................................................

x_heart word 300
y_heart word 90

boolean db 0 
;.........................................

x_bg word 0
y_bg word 20

;-----------DIRT BOX INITIAL COORDINATES-------------
x_dirt word 10
y_dirt word 170
dirtyvalue dw 32


;------------SPACE SHIP INITIAL COORDINATES----------
x_spShip word 10
y_spShip word 115

;------------SPACE SHIP 2 INITIAL COORDINATES----------
x_spShip2 word 300
y_spShip2 word 55

;------------CLOUD INITIAL COORDINATES---------------

x_cloud word 20
y_cloud word  60

x_cloudd word 120
y_cloudd word 50


;-------------CLOUD1 INITIAL COORDINATES-------------

x_cloud1 word 70
y_cloud1 word  65

x_cloudd1 word 240
y_cloudd1 word  55

x_clouddd word 180
y_clouddd word  40

;-----------SPACEROCK INITIAL COORDINATES------------
x_rock dw 250

;--------------CACTUS INITIAL COORDINATES------------
x_Cactus dw 150

x_Cactus2 dw 250

;--------------------MACRO STUFF-------------------

x_shape dw 5
y_shape dw 5


;---------------------GAME STUFF---------------------;

storybool db 1

dirtbool db 0
shipjumpbool db 0
shiptopbool db 0
jumpcheck db 0
rockbool db 0
cactus2bool db 0
heartbool db 0
enemyship db 0
shipbool db 0
shiptime db 0

CactusSpeed dw 5

tempgame db 0
tempgamedw dw 0
livesleft db 5
scoretotal dw 0
scoregametotal dw 0
tempScore dw 0
tempScore1 dw 0
tempScore2 dw 0
tempScore3 dw 0
digitCount db 0  
anotherCounter db 0
temp1 dw 0
temp2 db 0
tempLife db 0
tempLife1 db 0

temptime db 0
tempy dw 0
tempx dw 0

;----------------------Player Name Stuff-------------------------------

 STR1 DB "Enter Name (20 words max) : $"
 STR11 DB "Planet Mars is is Danger! Try your best to survive the impeding doom.This is theend. Good Luck, $"
       
        INSTR1 DB 20 DUP("$")
        NEWLINE DB 10,13,"$"



;---------------------MENU STUFF--------------------
tempmenu db ?
space DB 13,10,"$"

fileName db 'instruct.txt',0
handle dw ?
buffer db 300 DUP ("$")
firstcheck db 0



;.....................Score file handling stuff ..........

fn db "score.txt", 0
colon db ":"
slash db "/"
spc db " "

;...........time
hr db 0
min db 0
sec db 0
;......time's different tokens
t1 db 0 
t2 db 0
t3 db 0
t4 db 0
t5 db 0
t6 db 0

;...............date
day db ?
month db ?
yr dw ?
digitCount1 db 0  
anotherCounter1 db 0


;......date's different tokens
dm1 db 0
dm2 db 0
dd1 db 0
dd2 db 0
d1 dw 0
d2 dw 0
d3 dw 0
d4 dw 0

.code

;-------------------------------MAIN-----------------------------;

main proc

mov ax, @data
mov ds, ax

call ClearScreen

firstmenuloop:
.if ( livesleft > 0 )
call FirstScreen
cmp firstcheck,1
je firstmenuloop
.endif

call GameOverScreen

mov bx,0
mov dh,23		;sets cursor at bottom
mov dl,0
mov ah,02h
int 10h

mov ah,4ch
int 21h

main endp

;--------------------------CLEAR SCREEN----------------------------;

ClearScreen proc                                ;clear screen
    mov ah,0
    mov al,13h 
    int 10h
ret
ClearScreen endp		

;--------------------------- MENU ------------------------;

FirstScreen PROC

call ClearScreen

mov ah,06h
mov al,00h					;max size,fill
mov bh,42			;sets reddish background
mov ch,0		
mov cl,0
mov dh,25
mov dl,85
int 10h




mov ah, 06h				;;BOX COMMAND
mov al,5				;;SIZE OF BOX VERTICALLY
mov bh,00000000b		;;COLOUR OF BOX
mov ch,3				;;STARTING BOX
mov cl,11				;;LEFT MOST OF BOX
mov dh,10				;;VERTICAL POS
mov dl,30				;;RIGHT MOST OF BOX
int 10h

	dispchar 'E',3,15
	dispchar 'S',3,16
	dispchar 'C',3,17
	dispchar 'A',3,18
	dispchar 'P',3,19
	dispchar 'E',3,20
	dispchar ' ',3,21
	dispchar 'M',3,22
	dispchar 'A',3,23
	dispchar 'R',3,24
	dispchar 'S',3,25
	dispchar '!',3,26
	
	
	dispchar 'P',8,19
	dispchar 'L',8,20
	dispchar 'A',8,21
	dispchar 'Y',8,22



mov ah, 06h				;;BOX COMMAND
mov al,5				;;SIZE OF BOX VERTICALLY
mov bh,00000000b		;;COLOUR OF BOX
mov ch,11				;;STARTING BOX
mov cl,11				;;LEFT MOST OF BOX
mov dh,16				;;VERTICAL POS
mov dl,30				;;RIGHT MOST OF BOX
int 10h

	dispchar 'I',14,15
	dispchar 'N',14,16
	dispchar 'S',14,17
	dispchar 'T',14,18
	dispchar 'R',14,19
	dispchar 'U',14,20
	dispchar 'C',14,21
	dispchar 'T',14,22
	dispchar 'I',14,23
	dispchar 'O',14,24
	dispchar 'N',14,25
	dispchar 'S',14,26

mov ah, 06h				;;BOX COMMAND
mov al,5				;;SIZE OF BOX VERTICALLY
mov bh,00000000b		;;COLOUR OF BOX
mov ch,17				;;STARTING BOX
mov cl,11				;;LEFT MOST OF BOX
mov dh,22				;;VERTICAL POS
mov dl,30				;;RIGHT MOST OF BOX
int 10h

	dispchar 'E',20,19
	dispchar 'X',20,20
	dispchar 'I',20,21
	dispchar 'T',20,22

mov bx,0
mov dh,23		;sets cursor at bottom
mov dl,0
mov ah,02h
int 10h

jmp latergator

;---------------------------MOUSE CHECKS---------------------------;


verticalcheck:

cmp dl,6
jb latergator
cmp dl,11
jb gamecall

cmp dl,12
jb latergator
cmp dl,17
jb instructcall

cmp dl,18
jb latergator
cmp dl,23
jb endcall

jmp latergator

endcall:

mov firstcheck,0

ret

instructcall:

call InstructionScreen

mov firstcheck,1

ret

gamecall:

mov ax,01h 
Int 33h

call ClearScreen

call GameScreen

mov firstcheck,1

ret



;------------------------MOUSE CODE-------------------------;

mousecoord:

	mov tempmenu,8
	mov ax,dx				;DL WILL STORE VERTICAL AXIS
	div tempmenu
	mov dh,0
	mov dl,al
	
	mov ax,cx
	div tempmenu
	mov ch,0
	mov cl,al				;CL WILL STORE HORIZONTAL AXIS
	
	cmp cl,21
	jb latergator
	
	cmp cl,62
	jb verticalcheck
	
latergator:

mov bx,0



mov ax,03
int 33h

cmp bx,1
je mousecoord

mov ax,01h 
Int 33h

cmp bx,2
jne latergator


firstend:


call ClearScreen

;mov ax,02h 				;;;;;;;;;;;
;Int 33h

firstmenuend:

ret

FirstScreen endP

;---------------------INSTRUCTION MENU-------------------------;

InstructionScreen PROC

call ClearScreen

mov ah,06h
mov al,00h					;max size,fill
mov bh,20			;sets background
mov ch,0		
mov cl,0
mov dh,25
mov dl,85
int 10h

mov ah, 06h				;;BOX COMMAND
mov al,14				;;SIZE OF BOX VERTICALLY
mov bh,00000000b		;;COLOUR OF BOX
mov ch,4				;;STARTING BOX
mov cl,0				;;LEFT MOST OF BOX
mov dh,18				;;VERTICAL POS
mov dl,45				;;RIGHT MOST OF BOX
int 10h


mov dx, offset filename
mov al, 0						;;open file
mov ah, 3dh
int 21h

mov handle,ax


mov bx,ax
mov dx, offset buffer			;;read and put it in buffer
mov cx,300
mov ah,3fh						;;READ FILE
int 21h

mov si,offset buffer

mov bx,0
mov dh,5		;sets cursor at bottom
mov dl,0		;sets horizontal cursor pos
mov ah,02h
int 10h

mov dx,offset buffer
mov ah,09h
int 21h

mov ah,3eh						;;CLOSE FILE
int 21h


instructlatergator:

mov bx,0

mov ax,03
int 33h

mov ax,01h 
Int 33h

cmp bx,2
jne instructlatergator

ret 

InstructionScreen endP

;---------------------GAME PROC--------------------------;

GameScreen PROC

gamerepeat:



;---------------------STORY SEGMENT------------------------;
.if ( storybool == 1 )
	
	mov ah,06h
	mov al,0 ;row 20
	mov cx,0
	mov dh,80
	mov dl,80
	mov bh,73
	int 10h
	
	mov x_spShip,130
	mov y_spShip,100

	call DrawShip
	
	mov ah, 06h				;;BOX COMMAND
	mov al,7				;;SIZE OF BOX VERTICALLY
	mov bh,00000000b		;;COLOUR OF BOX
	mov ch,4				;;STARTING BOX
	mov cl,0				;;LEFT MOST OF BOX
	mov dh,11				;;VERTICAL POS
	mov dl,45				;;RIGHT MOST OF BOX
	int 10h
	
	mov bx,0
	mov dh,5		;sets cursor
	mov dl,0
	mov ah,02h
	int 10h

        LEA SI,INSTR1
		;GET STRING
		
        MOV AH,09H
        LEA DX,STR1
        INT 21H

        MOV AH,0AH
        MOV DX,SI
        INT 21H

        MOV AH,09H
        LEA DX,NEWLINE
        INT 21H

;PRINT THE STRING

		MOV AH,09H
        LEA DX,NEWLINE
        INT 21H

        MOV AH,09H
        LEA DX,STR11
        INT 21H

        MOV AH,09H
        LEA DX,INSTR1+2
        INT 21H

        MOV AH,09H
        LEA DX,NEWLINE
        INT 21H
	
	StoryRepeat:
	
	mov cx, 0FH
	mov dx, 4240H
	mov ah, 86H      ;BIOS Wait/Delay function
	int 15H
	
	mov al,57
	sub al,storybool
	dispcharacter al,14,24

	inc storybool
	cmp storybool,10
	jne StoryRepeat

	mov storybool,0
	mov x_spShip,10
	mov y_spShip,115
	
	mov x_cloud,20
	mov y_cloud,60

	mov x_cloudd,120
	mov y_cloudd,50

	mov x_cloud1,70
	mov y_cloud1,65

	mov x_cloudd1,240
	mov y_cloudd1,55

	mov x_clouddd,180
	mov y_clouddd,40
	
.endif

;------------------------GAME STARTS------------------------------;
;call ClearScreen
call Backgrnd

call getDate
call getTime

;-------------------Draw Dirt and Ship--------------------------;

call DrawDirt
call DrawShip

.if ( enemyship == 1 )
	call DrawShip2
.endif

DrawCloud x_cloud,y_cloud 
DrawCloud1 x_cloud1,y_cloud1
DrawCloud x_cloudd,y_cloudd 
DrawCloud1 x_cloudd1,y_cloudd1 
DrawCloud1 x_clouddd,y_clouddd
 
 .if (heartbool == 1)
call DrawHeart
call GetCactRightPixel
	.if al == 13
	inc livesleft
	.endif
.endif

;;;;;;;drawrectangle vertical,horizontal,colour,x_shapecoord,y_shapecoord;;;;;;;;;;

.if ( cactus2bool == 1 )
drawcactus2 x_Cactus2
.endif

drawcactus x_Cactus

	call GetCactRightPixel
	.if al == 49 || al == 50
	dec livesleft
	call playercollide
		.if livesleft == 0 
		call scoreLog
		jmp endgame
		.endif
	.endif

	call GetCactDownPixel
	.if al == 49 || al == 50
	dec livesleft
	call playercollide
		.if livesleft == 0 
		call scoreLog
		jmp endgame
		.endif

	.endif



;--------------------drawing space rock/aerial hurdle----------------;

.if ( rockbool == 1 )
drawRock x_rock
.endif

call GetCactRightPixel
.if al == 14
dec livesleft		
call playercollide
		.if livesleft == 0 
		call scoreLog
		jmp endgame
		.endif
.endif


call GetCactDownPixel
.if al == 14
dec livesleft		
call playercollide
		.if livesleft == 0 
		call scoreLog
		jmp endgame
		.endif
.endif


;-------------------------------TIME----------------------------------------;

mov cx, 01H
mov dx, 4240H
mov ah, 86H      ;BIOS Wait/Delay function
INT 15H




	mov tempgame,20
	mov ax,scoregametotal
	div tempgame			;;al = quotient , ah = remainder
	mov bh,0
	mov bl,al
	mov scoretotal,bx

	
;-------------------------RANDOM-----------------------------
	.if ( ah == 0 )					

		;mov ax,x_Cactus
		;mov tempgamedw,ax
		;mov ax,x_Cactus2
		
		;sub tempgamedw,ax
		
		;.if ( tempgamedw < 80 )
			mov ax,x_Cactus2
			mov tempgamedw,ax
			mov ax,x_Cactus
			
			sub tempgamedw,ax
				.if ( tempgamedw > 80 )
					mov cactus2bool,1
				.endif
		;.endif
	.endif
	
		.if ( temptime == 100 )
			.if ( tempgamedw > 80 )
				mov rockbool,1
			.endif
		
	.endif
	
	.if ( temptime == 160 )
		mov heartbool,1
	.endif
	
;---------------------------TIME AGAIN ---------------------------

	
	.if ( temptime == 200 )
		inc CactusSpeed
		mov enemyship,1
		mov x_spShip2,290
	.endif
	
;---------------------------STUFF CHANGING IN EACH LOOP-------------------------;

	.if (x_dirt < 10)
	mov x_dirt,20
	.endif

mov bx,CactusSpeed

.if ( enemyship == 1 )
	sub x_spShip2,13
.endif

.if ( x_spShip2 < 20 )
	mov x_spship2,290
	mov enemyship,0
.endif
sub x_dirt,5

sub x_cloud,10
sub x_cloud1,10
sub x_cloudd,10
sub x_clouddd,10
sub x_cloudd1,10

.if ( x_Cactus2 < 14 )
	mov cactus2bool,0
	mov x_cactus2,305
.endif

.if ( x_Cactus < 14 )
	mov x_cactus,305
.endif

dec bx
.if ( rockbool == 1 )
	sub x_rock,bx
.endif
inc bx

.if ( x_rock < 15 )
	mov x_rock,300
	mov rockbool,0
.endif


.if ( x_cloud < 5 )
	mov x_cloud,300
.endif

.if ( x_cloudd < 5 )
	mov x_cloudd,300
.endif

.if ( x_clouddd < 5 )
	mov x_clouddd,300
.endif

.if ( x_cloudd1 < 5 )
	mov x_cloudd1,300
.endif

.if ( x_cloud1 < 5 )
	mov x_cloud1,300
.endif

sub x_Cactus,bx

.if ( cactus2bool == 1 )
sub x_Cactus2,bx
.endif

.if ( heartbool == 1 )
sub x_heart,10
.endif

.if ( x_heart < 10 )
	mov x_heart,305
	mov heartbool,0
.endif

inc scoregametotal
inc temptime		;;USED FOR FIXING DIRT ETC
inc shiptime

.if ( shiptime == 4 )
	mov shipbool,1
	mov shiptime,0
.endif

.if ( shiptime == 2 )
	mov shipbool,0
.endif

;----------------------------------KEY INPUT--------------------------------------------;
mov ah,0
mov al,0

.if (shipjumpbool == 0)

		mov shiptopbool,0
		; Get keystroke
		mov ah,01h
		int 16h
		
		cmp al,32
		je playerjump
		;cmp al,27
		;je jmp2menu
		;cmp al,119
		;je up
		;cmp al,97
		;je left
		;cmp al,100
		;je right
		;cmp al,115
		;je down
		cmp al,80
		je gamepause
		cmp al,112
		je gamepause
		
		; AH = BIOS scan code
		cmp ah,48h
		je up
		cmp ah,4Bh
		je left
		cmp ah,4Dh
		je right
		cmp ah,50h
		je down
		;cmp ah,1
	
		jmp gamemousecheck

	jmp2menu:
		mov ah,08h              
		int 21h	
		jmp endgame

	playerjump:
		mov shipjumpbool,1
		mov ah,08h              
		int 21h	
		jmp gamerepeat

	gamepause:
		mov ah,08h              
		int 21h
		mov ah,08h              
		int 21h
		mov ah,08h              
		int 21h
		jmp gamerepeat
	up:
		.if y_spShip > 110	
		sub y_spship,5
		;call DrawShip
		.endif
		
		mov ah,08h              
		int 21h					;CLEAR KEYBOARD BUFFER
		mov ah,08h              
		int 21h
		jmp gamerepeat
	down:
		
		.if y_spShip < 130
		add y_spShip,5
		;call DrawShip
		
			 call GetCactDownPixel
			.if al == 49 || al == 50
			dec livesleft
			call playercollide
				.if livesleft == 0 
				call scoreLog
				jmp endgame
				.endif
			.endif
		.endif
		.if al==13
		inc livesleft
		;call ReDraw2
		.endif
		mov ah,08h              
		int 21h
		mov ah,08h              
		int 21h
		jmp gamerepeat
	left:
		.if x_spShip > 0
		sub x_spShip,5
		;call DrawShip
		.endif
		
		mov ah,08h              
		int 21h
		mov ah,08h              
		int 21h
		jmp gamerepeat
	right:
		.if x_spShip < 275
		add x_spship,5
		;call DrawShip
		call GetCactRightPixel
			.if al == 49 || al == 50 
			dec livesleft
			call playercollide
				.if livesleft == 0 
				call scoreLog
				jmp endgame
				.endif
			.endif
		.endif
		.if al==13
		add boolean,1
		;cmp boolean,1
		;je lab

		;lab:
		inc livesleft
		.endif
		mov ah,08h              
		int 21h
		mov ah,08h              
		int 21h
		jmp gamerepeat
.endif
	
.if ( shipjumpbool != 0 )
		.if ( shiptopbool == 0 )
		sub y_spShip,10
		inc shipjumpbool
		.endif
		
		.if ( shipjumpbool == 7 )
			mov shiptopbool,1
		.endif
		
		.if ( shiptopbool == 1 )
		add y_spShip,10
		dec shipjumpbool
			.if ( shipjumpbool == 1 )
				mov shiptopbool,0
				mov shipjumpbool,0
			.endif
		.endif
		mov shipbool,1
.endif

gamemousecheck:

mov bx,0

mov ax,03
int 33h

mov ax,02h 
Int 33h

cmp bx,2
jne gamerepeat

endgame:

ret

GameScreen endP

;-------------------------COLLISION PROC-----------------------------;

playercollide PROC

call Backgrnd
;call ClearScreen

mov x_spShip,120
mov y_spShip,90

call DrawShip

mov al,livesleft
add al,48
dispchar al,13,23


mov x_spShip,10
mov y_spShip,115

mov cx, 1FH
mov dx, 4240H
mov ah, 86H      ;BIOS Wait/Delay function
int 15H

mov x_rock,300
mov x_Cactus,150
mov x_Cactus2,250
mov x_heart,305

playercollide endp

;---------------------GameOver Screen Proc-----------------------

GameOverScreen PROC

call ClearScreen

.if (livesleft == 0)
mov ah,06h
mov al,00h					;max size,fill
mov bh,00			;sets reddish background
mov ch,0		
mov cl,0
mov dh,25
mov dl,85
int 10h

mov ah, 06h				;;BOX COMMAND
mov al,5				;;SIZE OF BOX VERTICALLY
mov bh,00000000b		;;COLOUR OF BOX
mov ch,3				;;STARTING BOX
mov cl,11				;;LEFT MOST OF BOX
mov dh,10				;;VERTICAL POS
mov dl,30				;;RIGHT MOST OF BOX
int 10h


	dispcharacter 'G',9,15
	dispcharacter 'A',9,16
	dispcharacter 'M',9,17
	dispcharacter 'E',9,18
	dispcharacter ' ',9,19
	
	dispcharacter 'O',9,20
	dispcharacter 'V',9,21
	dispcharacter 'E',9,22
	dispcharacter 'R',9,23
	dispcharacter '.',9,24

;call PlayerName
.endif

ret

GameOverScreen endp

;--------------------------------OTHER PROCs--------------------------;


GetCactRightPixel proc                    ; cactus detection right
    mov ah,0dh
    mov bh,0
    mov cx,x_spShip
    add cx,46
    mov dx,y_spShip
    add dx,14
    int 10h
ret
GetCactRightPixel endp
;.................


GetCactDownPixel proc                    ; cactus detection right
    mov ah,0dh
    mov bh,0
    mov cx,x_spShip
    add cx,23
    mov dx,y_spShip
    add dx,34
    int 10h
ret
GetCactDownPixel endp

;=========================GAME BACKGROUND==========================;

Backgrnd proc

mov ah,06h
mov al,0 ;row 20
mov cx,0
mov dh,35
mov dl,80
mov bh,0
int 10h


mov ah,06h
mov al,20 ;row 20
mov cx,0
mov dh,80
mov dl,80
mov bh,41
int 10h

;-------------------PRINTING SCORE-----------------

dispchar1 'S',2,29
dispchar1 'C',2,30
dispchar1 'O',2,31
dispchar1 'R',2,32
dispchar1 'E',2,33
dispchar1 ':',2,34

mov tempScore3,0
add tempScore3,48

mov tempScore2,0
add tempScore2,48

mov tempScore1,0
add tempScore1,48


;.............print score n-digit 

mov ax,scoretotal

countTotalScoreDigits:
mov bl,10
div bl 
mov temp2,al 
mov ax,0
mov al,temp2 
inc digitCount
cmp al,0
jne countTotalScoreDigits

mov cl,digitCount
mov anotherCounter,cl
 mov ax,scoretotal

BreakIt:
 cmp digitCount,0
 je displayIt 

 mov bl,10
 div bl   
 mov dx,0 
 mov dl,ah
 push dx
 mov ah,0   
 dec digitCount
 jmp BreakIt
 
displayIt: 
 cmp anotherCounter,0
 je next
 pop dx
 add dx,48
 
.if anotherCounter == 4
 mov tempScore3,dx
.endif

.if anotherCounter == 3
 mov tempScore2,dx
.endif

.if anotherCounter == 2
 mov tempScore1,dx
.endif

.if anotherCounter == 1
 mov tempScore,dx
.endif

 dec anotherCounter 
 jmp displayIt


next:

dispchar2 tempScore3,2,35
dispchar2 tempScore2,2,36
dispchar2 tempScore1,2,37
dispchar2 tempScore,2,38

;--------------------PRINTING LIVES----------------------

dispchar1 'L',2,5
dispchar1 'I',2,6
dispchar1 'V',2,7
dispchar1 'E',2,8
dispchar1 'S',2,9
dispchar1 ':',2,10

;.............print lives n(2)-digit 


mov bl,10
mov ax,0
mov al,livesleft 
mov ah,0
div bl
mov bl,al
mov bh,ah
add bl,48
add bh,48
mov tempLife,bl 
mov tempLife1,bh

dispchar1 tempLife,2,11
dispchar1 tempLife1,2,12

ret
Backgrnd endp

;---------------------get system date and time and write to scoreLog file ---------

scoreLog proc


lea dx, fn          
mov al, 1                   
mov ah, 3Dh                 
int 21h
mov handle, ax

mov ah, 42h
mov al,2                   
mov bx, handle		
mov cx,0
mov dx,0
int 21h

;................token score 1		
mov cx,1       
mov bx,handle              
lea dx,tempScore3                
mov ah,40h                 
int 21h

;................token score 2	
mov ah, 42h
mov al, 1                   
mov bx, handle		 
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,tempScore2                
mov ah,40h                 
int 21h

;................token score 3	
mov ah, 42h
mov al, 1                   
mov bx, handle		 
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,tempScore1                
mov ah,40h                 
int 21h

;................token score 4	

mov ah, 42h
mov al, 1                   
mov bx, handle		 
mov cx, 0
mov dx, 0
int 21h

mov cx,1       
mov bx,handle              
lea dx,tempScore                
mov ah,40h                 
int 21h

;...................... time write hrs

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h

;............space token
mov cx,1       
mov bx,handle              
lea dx,spc               
mov ah,40h                 
int 21h

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,t1               
mov ah,40h                 
int 21h

;.....................
mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,t2               
mov ah,40h                 
int 21h
;.....................

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,colon              
mov ah,40h                 
int 21h

;....................... time write mins

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h

mov cx,1       
mov bx,handle              
lea dx,t3               
mov ah,40h                 
int 21h

;.....................
mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h

mov cx,1       
mov bx,handle              
lea dx,t4               
mov ah,40h                 
int 21h

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h


;...................... date write day

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h

;............space token
mov cx,1       
mov bx,handle              
lea dx,spc               
mov ah,40h                 
int 21h

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,dd1               
mov ah,40h                 
int 21h

;.....................
mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,dd2               
mov ah,40h                 
int 21h
;.....................

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,slash              
mov ah,40h                 
int 21h

;....................... date write month

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,dm1               
mov ah,40h                 
int 21h

;.....................
mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,dm2              
mov ah,40h                 
int 21h

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h

mov cx,1       
mov bx,handle              
lea dx,slash              
mov ah,40h                 
int 21h

;..................date write year

mov ah, 42h
mov al, 1                   
mov bx, handle		 
mov cx, 0
mov dx, 0
int 21h

mov cx,1       
mov bx,handle              
lea dx,d4               
mov ah,40h                 
int 21h
;................token year 3	
mov ah, 42h
mov al, 1                   
mov bx, handle		 
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,d3               
mov ah,40h                 
int 21h

;................token year 2	
mov ah, 42h
mov al, 1                   
mov bx, handle		 
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,d2                
mov ah,40h                 
int 21h

;................token year 1	

mov ah, 42h
mov al, 1                   
mov bx, handle		 
mov cx, 0
mov dx, 0
int 21h


mov cx,1       
mov bx,handle              
lea dx,d1                
mov ah,40h                 
int 21h

;.................write go to newline

mov ah, 42h
mov al, 1                   
mov bx, handle		
mov cx, 0
mov dx, 0
int 21h

mov cx,1       
mov bx,handle              
lea dx,SPACE               
mov ah,40h                 
int 21h

;...............file close

mov ah, 3Eh
mov bx, handle
int 21h

ret
scoreLog endp


getTime proc

;....getting system time......;

mov ah,2ch
int 21h
mov hr,ch
mov min,cl
mov sec,dh

;....................hrs
mov bl,10
mov dl,hr
mov al,dl
mov ah,0
div bl
mov t1,al
mov t2,ah
add t1,48
add t2,48

;.....................min

mov bl,10
mov dl,min
mov al,dl
mov ah,0
div bl
mov t3,al
mov t4,ah
add t3,48
add t4,48

;........................sec

mov bl,10
mov dl,sec
mov al,dl
mov ah,0
div bl
mov t5,al
mov t6,ah
add t5,48
add t6,48


ret
getTime endp

getDate proc


;..getting system date........

mov ah,2Ah
int 21h
mov yr,cx
mov month,dh
mov day,dl


mov ax,yr

countTotalYearDigits:
mov bl,10
div bl 
mov temp2,al 
mov ax,0
mov al,temp2 
inc digitCount1
cmp al,0
jne countTotalYearDigits

mov cl,digitCount1
mov anotherCounter1,cl

mov ax,yr

BreakIt1:
 cmp digitCount1,0
 je store 

 mov bl,10
 div bl   
 mov dx,0 
 mov dl,ah
 push dx
 mov ah,0   
 dec digitCount1
 jmp BreakIt1
 
store: 
  cmp anotherCounter1,0
 je nxt
 pop dx
 add dx,48
 
.if anotherCounter1 == 4
 mov d4,dx
.endif

.if anotherCounter1 == 3
 mov d3,dx
.endif

.if anotherCounter1 == 2
 mov d2,dx
.endif

.if anotherCounter1 == 1
 mov d1,dx
.endif

 dec anotherCounter1 
 jmp store

nxt:
;..................... month

mov bl,10
mov dl,month
mov al,dl
mov ah,0
div bl
mov dm1,al
mov dm2,ah
add dm1,48
add dm2,48

;........................ day

mov bl,10
mov dl,day
mov al,dl
mov ah,0
div bl
mov dd1,al
mov dd2,ah
add dd1,48
add dd2,48

ret
getDate endp

;------------------------DRAW SHIP AND DIRT etc------------------;

DrawShip proc                                 ;Draw Surface
	push x_spShip
	push y_spShip
	mov cx,1
	Loop1:
	    push cx
		push y_spShip
		mov si, offset SpaceShip
		mov cx,27
		.if ( shipbool == 1 )
			mov si, offset SpaceShip1
			mov cx,29
		.endif
		
		Loop2:
			 push cx
			 push x_spShip 
			 mov cx,46
			 Loop3:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				  .if (al == 41)
					jmp skipship
				.endif
				 mov cx,x_spShip 
				 mov dx,y_spShip
				 int 10h
				 skipship:
				 inc x_spShip
				 pop cx
				 inc si
			
			 LOOP Loop3
			 inc y_spShip
			 pop x_spShip
			 pop cx
		LOOP Loop2
		pop y_spShip
		add x_spShip,46
		pop cx
	LOOP Loop1
	pop y_spShip 
	pop x_spShip
ret
DrawShip endp

DrawShip2 proc                                 ;Draw Surface
	push x_spShip2
	push y_spShip2
	mov cx,1
	Loop1s:
	    push cx
		push y_spShip2
		mov si, offset SpaceShip2
		mov cx,27
		Loop2s:
			 push cx
			 push x_spShip2 
			 mov cx,46
			 Loop3s:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				.if (al == 41)
					jmp skipship2
				.endif
				 mov cx,x_spShip2 
				 mov dx,y_spShip2
				 int 10h
				 skipship2:
				 inc x_spShip2
				 pop cx
				 inc si
			
			 LOOP Loop3s
			 inc y_spShip2
			 pop x_spShip2
			 pop cx
		LOOP Loop2s
		pop y_spShip2
		add x_spShip2,46
		pop cx
	LOOP Loop1s
	pop y_spShip2 
	pop x_spShip2
ret
DrawShip2 endp

DrawDirt proc                                 ;Draw Surface
	push x_dirt 
	push y_dirt
	mov cx,23
	Loop11:
	    push cx
		push y_dirt
		mov si, offset Dirt
		mov cx,dirtyvalue
		Loop22:
			 push cx
			 push x_dirt 
			 mov cx,14
			 Loop33:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 mov cx,x_dirt 
				 mov dx,y_dirt
				 int 10h
				 inc x_dirt
				 pop cx
				 inc si
			
			 LOOP Loop33
			 inc y_dirt
			 pop x_dirt
			 pop cx
		LOOP Loop22
		pop y_dirt
		add x_dirt,14
		pop cx
	LOOP Loop11
	pop y_dirt
	pop x_dirt 
ret
DrawDirt endp



;.................draw heart.....................
DrawHeart proc



  	 push x_heart
	push y_heart
	mov cx,1
	Loop111:
	    push cx
		push y_heart
		mov si, offset Heart
		mov cx,22
		Loop222:
			 push cx
			 push x_heart
			 mov cx,28
			 Loop333:
				 push cx
				 mov ah,0Ch
				 mov al,[si]
				 .if (al == 41)
					jmp skipheart
				.endif
				 mov cx,x_heart 
				 mov dx,y_heart
				 int 10h
				 
				 skipheart:
				 inc x_heart
				 pop cx
				 inc si
			
			 LOOP Loop333
			 inc y_heart
			 pop x_heart
			 pop cx
		LOOP Loop222
		pop y_heart
		add x_heart,28
		pop cx
	LOOP Loop111
	pop y_heart 
	pop x_heart
ret
DrawHeart endp
;..................................

end main